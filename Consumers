---------------------------------- ConsumerAssign --------------------------------
package consumer;

import java.util.ArrayList;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.TopicPartition;
import org.apache.log4j.Logger;

public class ConsumerAssignApp {
	final static Logger logger = Logger.getLogger(ConsumerSubscribeApp.class);

	public static void main(String[] args) {
		logger.debug("ConsumerAssignApp.main(): Starts");
		
		//Properties
		Properties props = new Properties();
		props.put("bootstrap.servers", "localhost:9092, localhost:9093");
		props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("group.id", "Test");
		
		//Kafka Consumer
		KafkaConsumer<String, String> myConsumer = new KafkaConsumer<String, String>(props);
		
		//Partitions
		TopicPartition part1 = new TopicPartition("TestTopic",0);
		TopicPartition part2 = new TopicPartition("TestTopic2",1);
		ArrayList<TopicPartition> partitions = new ArrayList<TopicPartition>();
		partitions.add(part1);
		partitions.add(part2);
		
		//Assign
		myConsumer.assign(partitions);
		
		//Poll Loop
		try {
			while (true) {
				ConsumerRecords<String, String> records = myConsumer.poll(100);
				for (ConsumerRecord<String, String> record : records) {
					System.out.println(String.format("Topic: %s, Partition: %d, Offset: %d, Key: %s, Value: %s",
							record.topic(), record.partition(), record.offset(), record.key(), record.value()));
				}
			}
			
		} catch (Exception e) {
			logger.error(e.getMessage());
		}finally{
			logger.debug("ConsumerAssignApp.main(): Ends");
			myConsumer.close();
		}

	}

}

---------------------------------------- Consumer Subscribe --------------------------
package consumer;

import java.util.ArrayList;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.log4j.Logger;

public class ConsumerSubscribeApp {
	final static Logger logger = Logger.getLogger(ConsumerSubscribeApp.class);

	public static void main(String[] args) {
		logger.debug("ConsumerSubscribeApp.main(): Starts");
		
		//Properties
		Properties props = new Properties();
		props.put("bootstrap.servers", "localhost:9092, localhost:9093");
		props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("group.id", "Test");
		
		//Kafka Consumer
		KafkaConsumer<String, String> myConsumer = new KafkaConsumer<String, String>(props);
		
		//Topic List
		ArrayList<String> topics = new ArrayList<String>();
		topics.add("TestTopic");
		topics.add("TestTopic2");
		
		//Subscribe topic list
		myConsumer.subscribe(topics);
		
		//Poll Loop
		try {
			while (true) {
				ConsumerRecords<String, String> records = myConsumer.poll(100);
				for (ConsumerRecord<String, String> record : records) {
					System.out.println(String.format("Topic: %s, Partition: %d, Offset: %d, Key: %s, Value: %s",
							record.topic(), record.partition(), record.offset(), record.key(), record.value()));
				}
			}
			
		} catch (Exception e) {
			logger.error(e.getMessage());
		}finally{
			logger.debug("ConsumerSubscribeApp.main(): Ends");
			myConsumer.close();
		}

	}

}

---------------------------------- Consumer Commit Sync ------------------------
package consumer;

import java.util.ArrayList;
import java.util.Properties;

import org.apache.kafka.clients.consumer.CommitFailedException;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.log4j.Logger;

public class ConsumerCommitSync {
	private static Logger logger = Logger.getLogger(ConsumerCommitSync.class);

	public static void main(String[] args) {
		logger.debug("ConsumerCommitSync.main(): Starts");
		
		//Properties
		Properties props = new Properties();
		props.put("bootstrap.servers", "localhost:9092, localhost:9093");
		props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("group.id", "Test");
		
		//CommitSync Property
		props.put("enable.auto.commit", "false");
	
		//Topics
		ArrayList<String> topics = new ArrayList<String>();
		topics.add("TestTopic");
		topics.add("TestTopic2");
		
		//Consumer
		KafkaConsumer<String, String> myConsumer = new KafkaConsumer<String, String>(props);
		
		//Subscribing
		myConsumer.subscribe(topics);
		
		//Poll Loop
		try{
			while(true){
				int i=0;
				ConsumerRecords<String, String> records = myConsumer.poll(100);
				for (ConsumerRecord<String, String> oneRecord : records) {
					i++;
					logger.debug(String.format("Topic: %s, Partition: %d, Offset: %d, Key: %s, "
							+ "value: %s, MessageNumber: %d", oneRecord.topic(), oneRecord.partition(), oneRecord.offset(), 
							oneRecord.key(), oneRecord.value(), i));
				}
				try {
					myConsumer.commitSync();
				} catch (CommitFailedException e) {
					logger.error(e.getMessage());
				}
			}
			
		}catch(Exception e){
			logger.error(e.getMessage());
		}finally{
			logger.debug("ConsumerCommitSync.main(): Ends");
			myConsumer.close();
		}
	}

}

------------------------------------------ Consumer Commit Async With Callback----------------------------------
package consumer;

import java.util.ArrayList;
import java.util.Properties;

import org.apache.kafka.clients.consumer.CommitFailedException;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.log4j.Logger;

public class ConsumerCommitAsyncWithCallBack {
	private static Logger logger = Logger.getLogger(ConsumerCommitAsyncWithCallBack.class);

	public static void main(String[] args) {
		logger.debug("ConsumerCommitAsyncWithoutCallBack.main(): Starts");
		
		//Properties
		Properties props = new Properties();
		props.put("bootstrap.servers", "localhost:9092, localhost:9093");
		props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("group.id", "Test");
		
		//CommitSync Property
		props.put("enable.auto.commit", "false");
	
		//Topics
		ArrayList<String> topics = new ArrayList<String>();
		topics.add("TestTopic");
		topics.add("TestTopic2");
		
		//Consumer
		KafkaConsumer<String, String> myConsumer = new KafkaConsumer<String, String>(props);
		
		//Subscribing
		myConsumer.subscribe(topics);
		
		//Poll Loop
		try{
			while(true){
				int i=0;
				ConsumerRecords<String, String> records = myConsumer.poll(100);
				for (ConsumerRecord<String, String> oneRecord : records) {
					i++;
					logger.debug(String.format("Topic: %s, Partition: %d, Offset: %d, Key: %s, "
							+ "value: %s, MessageNumber: %d", oneRecord.topic(), oneRecord.partition(), oneRecord.offset(), 
							oneRecord.key(), oneRecord.value(), i));
				}
				try {
					//Calling Async Commit with Offset Callback Implementer object
					myConsumer.commitAsync(new OffsetCallbackImplementer());
				} catch (CommitFailedException e) {
					logger.error(e.getMessage());
				}
			}
			
		}catch(Exception e){
			logger.error(e.getMessage());
		}finally{
			logger.debug("ConsumerCommitAsyncWithCallBack.main(): Ends");
			myConsumer.close();
		}
	}

}

---------------------------------- Consumer Commit Async Without Call back ------------------------------
package consumer;

import java.util.ArrayList;
import java.util.Properties;

import org.apache.kafka.clients.consumer.CommitFailedException;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.log4j.Logger;

public class ConsumerCommitAsyncWithoutCallBack {
	private static Logger logger = Logger.getLogger(ConsumerCommitAsyncWithoutCallBack.class);

	public static void main(String[] args) {
		logger.debug("ConsumerCommitAsyncWithoutCallBack.main(): Starts");
		
		//Properties
		Properties props = new Properties();
		props.put("bootstrap.servers", "localhost:9092, localhost:9093");
		props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("group.id", "Test");
		
		//CommitSync Property
		props.put("enable.auto.commit", "false");
	
		//Topics
		ArrayList<String> topics = new ArrayList<String>();
		topics.add("TestTopic");
		topics.add("TestTopic2");
		
		//Consumer
		KafkaConsumer<String, String> myConsumer = new KafkaConsumer<String, String>(props);
		
		//Subscribing
		myConsumer.subscribe(topics);
		
		//Poll Loop
		try{
			while(true){
				int i=0;
				ConsumerRecords<String, String> records = myConsumer.poll(100);
				for (ConsumerRecord<String, String> oneRecord : records) {
					i++;
					logger.debug(String.format("Topic: %s, Partition: %d, Offset: %d, Key: %s, "
							+ "value: %s, MessageNumber: %d", oneRecord.topic(), oneRecord.partition(), oneRecord.offset(), 
							oneRecord.key(), oneRecord.value(), i));
				}
				try {
					myConsumer.commitAsync();
				} catch (CommitFailedException e) {
					logger.error(e.getMessage());
				}
			}
			
		}catch(Exception e){
			logger.error(e.getMessage());
		}finally{
			logger.debug("ConsumerCommitAsyncWithoutCallBack.main(): Ends");
			myConsumer.close();
		}
	}

}

---------------------------------- Consumer Auto Commit -------------------------------
package consumer;

import java.util.ArrayList;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.log4j.Logger;

public class ConsumerAutoCommit {
	private static Logger logger = Logger.getLogger(ConsumerAutoCommit.class);

	public static void main(String[] args) {
		logger.debug("ConsumerAutoCommit.main(): Starts");
		
		//Properties
		Properties props = new Properties();
		props.put("bootstrap.servers", "localhost:9092, localhost:9093");
		props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
		props.put("group.id", "Test");
		
		//AutoCommit Properties
		props.put("enable.auto.commit", "true");
		props.put("auto.commit.interval.ms",1000);
	
		//Topics
		ArrayList<String> topics = new ArrayList<String>();
		topics.add("TestTopic");
		topics.add("TestTopic2");
		
		//Consumer
		KafkaConsumer<String, String> myConsumer = new KafkaConsumer<String, String>(props);
		
		//Subscribing
		myConsumer.subscribe(topics);
		
		//Poll Loop
		try{
			while(true){
				int i=0;
				ConsumerRecords<String, String> records = myConsumer.poll(100);
				for (ConsumerRecord<String, String> oneRecord : records) {
					i++;
					logger.debug(String.format("Topic: %s, Partition: %d, Offset: %d, Key: %s, "
							+ "value: %s, MessageNumber: %d", oneRecord.topic(), oneRecord.partition(), oneRecord.offset(), 
							oneRecord.key(), oneRecord.value(), i));
				}
			}
			
		}catch(Exception e){
			logger.error(e.getMessage());
		}finally{
			logger.debug("ConsumerAutoCommit.main(): Ends");
			myConsumer.close();
		}
	}

}

------------------------------ Consumer Sync Async Commit ---------------------------------
package consumer;

import java.util.ArrayList;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.log4j.Logger;

public class ConsumerSyncAsyncCommit {
	private static Logger logger = Logger
			.getLogger(ConsumerSyncAsyncCommit.class);

	public static void main(String[] args) {
		logger.debug("ConsumerSyncAsyncCommit.main(): Starts");

		Properties props = new Properties();
		props.put("bootstrap.servers", "localhost:9092, localhost:9093");
		props.put("key.deserializer",
				"org.apache.kafka.common.serialization.StringDeserializer");
		props.put("value.deserializer",
				"org.apache.kafka.common.serialization.StringDeserializer");
		props.put("group.id", "Test");

		// CommitSync Property
		props.put("enable.auto.commit", "false");

		// Consumer
		KafkaConsumer<String, String> myConsumer = new KafkaConsumer<String, String>(
				props);

		// Topics List
		ArrayList<String> topics = new ArrayList<String>();
		topics.add("TestTopic");
		topics.add("TestTopic2");

		// Subscribing Topics
		myConsumer.subscribe(topics);

		// Poll Loop
		try {
			while (true) {
				ConsumerRecords<String, String> records = myConsumer.poll(100);
				for (ConsumerRecord<String, String> oneRecord : records) {
					logger.debug(String.format(
							"Topic: %s, Partition: %d, Offset: %d, Key: %s, "
									+ "value: %s", oneRecord.topic(),
							oneRecord.partition(), oneRecord.offset(),
							oneRecord.key(), oneRecord.value()));
				}
				// Commit Async
				myConsumer.commitAsync();
			}
		} catch (Exception e) {
			logger.error("Unexpected Error: " + e);
		} finally {
			try {
				myConsumer.commitSync();
			} finally {
				logger.debug("ConsumerSyncAsyncCommit.main(): Ends");
				myConsumer.close();
			}
		}
	}
}

------------------------------- OffsetCAllback Implementer --------------------
package consumer;

import java.util.Map;

import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.clients.consumer.OffsetCommitCallback;
import org.apache.kafka.common.TopicPartition;
import org.apache.log4j.Logger;

public class OffsetCallbackImplementer implements OffsetCommitCallback{
	private static Logger logger = Logger.getLogger(OffsetCallbackImplementer.class);

	public void onComplete(Map<TopicPartition, OffsetAndMetadata> offsets,
			Exception ex) {
		if(ex != null) {
			logger.error("Offset Commit failed for offsets {}", (Throwable) offsets);
			logger.error(ex.getMessage());
		}
	}
}

